// Code generated by go-swagger; DO NOT EDIT.

package auth

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
	"github.com/gorilla/mux"
)

// NewVerifyParams creates a new VerifyParams object
// no default values defined in spec.
func NewVerifyParams() VerifyParams {

	return VerifyParams{}
}

// VerifyParams contains all the bound params for the verify operation
// typically these are obtained from a http.Request
//
// swagger:parameters Verify
type VerifyParams struct {
	/*The verification code
	  Required: true
	  In: query
	*/
	Code string `json:"code"`

	/*The redirect uri
	  Required: true
	  In: query
	*/
	RedirectURI string `json:"redirect_uri"`

	/*The user's subject identifier
	  Required: true
	  In: query
	*/
	Sub string `json:"sub"`

	// HTTP Request
	req *http.Request

	// HTTP Response
	res http.ResponseWriter
}

// Context returns the request context
func (o *VerifyParams) Context() context.Context {
	return o.req.Context()
}

// UnbindRequest returns the response and request associated with the parameters
func (o *VerifyParams) UnbindRequest() (http.ResponseWriter, *http.Request) {
	return o.res, o.req
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
func (o *VerifyParams) BindRequest(w http.ResponseWriter, r *http.Request, c ...runtime.Consumer) error {
	var res []error

	// ensure defaults
	*o = NewVerifyParams()

	vars := mux.Vars(r)
	route := struct {
		Consumer runtime.Consumer
		Formats  strfmt.Registry
		GetOK    func(name string) ([]string, bool, bool)
	}{
		Consumer: runtime.JSONConsumer(),
		Formats:  strfmt.NewFormats(),
		GetOK: func(name string) ([]string, bool, bool) {
			val, ok := vars[name]
			if !ok {
				return nil, false, false
			}
			return []string{val}, true, val != ""
		},
	}

	if len(c) > 0 {
		route.Consumer = c[0]
	}

	o.req = r
	o.res = w

	qs := runtime.Values(r.URL.Query())

	qCode, qhkCode, _ := qs.GetOK("code")
	if err := o.bindCode(qCode, qhkCode, route.Formats); err != nil {
		res = append(res, err)
	}

	qRedirectURI, qhkRedirectURI, _ := qs.GetOK("redirect_uri")
	if err := o.bindRedirectURI(qRedirectURI, qhkRedirectURI, route.Formats); err != nil {
		res = append(res, err)
	}

	qSub, qhkSub, _ := qs.GetOK("sub")
	if err := o.bindSub(qSub, qhkSub, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindCode binds and validates parameter Code from query.
func (o *VerifyParams) bindCode(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("code", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false
	if err := validate.RequiredString("code", "query", raw); err != nil {
		return err
	}

	o.Code = raw

	return nil
}

// bindRedirectURI binds and validates parameter RedirectURI from query.
func (o *VerifyParams) bindRedirectURI(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("redirect_uri", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false
	if err := validate.RequiredString("redirect_uri", "query", raw); err != nil {
		return err
	}

	o.RedirectURI = raw

	return nil
}

// bindSub binds and validates parameter Sub from query.
func (o *VerifyParams) bindSub(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("sub", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false
	if err := validate.RequiredString("sub", "query", raw); err != nil {
		return err
	}

	o.Sub = raw

	return nil
}
