// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/gorilla/mux"
	"github.com/libatomic/oauth/pkg/oauth"
)

// NewUserInfoUpdateParams creates a new UserInfoUpdateParams object
// no default values defined in spec.
func NewUserInfoUpdateParams() UserInfoUpdateParams {

	return UserInfoUpdateParams{}
}

// UserInfoUpdateParams contains all the bound params for the user info update operation
// typically these are obtained from a http.Request
//
// swagger:parameters UserInfoUpdate
type UserInfoUpdateParams struct {
	/*The new profile
	  In: body
	*/
	Profile *oauth.Profile `json:"profile,omitempty"`

	// HTTP Request
	req *http.Request

	// HTTP Response
	res http.ResponseWriter
}

// Context returns the request context
func (o *UserInfoUpdateParams) Context() context.Context {
	return o.req.Context()
}

// UnbindRequest returns the response and request associated with the parameters
func (o *UserInfoUpdateParams) UnbindRequest() (http.ResponseWriter, *http.Request) {
	return o.res, o.req
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
func (o *UserInfoUpdateParams) BindRequest(w http.ResponseWriter, r *http.Request, c ...runtime.Consumer) error {
	var res []error

	// ensure defaults
	*o = NewUserInfoUpdateParams()

	vars := mux.Vars(r)
	route := struct {
		Consumer runtime.Consumer
		Formats  strfmt.Registry
		GetOK    func(name string) ([]string, bool, bool)
	}{
		Consumer: runtime.JSONConsumer(),
		Formats:  strfmt.NewFormats(),
		GetOK: func(name string) ([]string, bool, bool) {
			val, ok := vars[name]
			if !ok {
				return nil, false, false
			}
			return []string{val}, true, val != ""
		},
	}

	if len(c) > 0 {
		route.Consumer = c[0]
	}

	o.req = r
	o.res = w

	if runtime.HasBody(r) {
		defer r.Body.Close()
		var body oauth.Profile
		if err := route.Consumer.Consume(r.Body, &body); err != nil {
			res = append(res, errors.NewParseError("profile", "body", "", err))
		} else {
			// validate body object
			if v, ok := interface{}(body).(runtime.Validatable); ok {
				if err := v.Validate(route.Formats); err != nil {
					res = append(res, err)
				}
			}

			if len(res) == 0 {
				o.Profile = &body
			}
		}
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
