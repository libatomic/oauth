// Code generated by go-swagger; DO NOT EDIT.

package auth

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
	"github.com/gorilla/mux"
)

// NewTokenParams creates a new TokenParams object
// no default values defined in spec.
func NewTokenParams() TokenParams {

	return TokenParams{}
}

// TokenParams contains all the bound params for the token operation
// typically these are obtained from a http.Request
//
// swagger:parameters Token
type TokenParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*The reqest audience for client_credentials flows
	  In: formData
	*/
	Audience *string

	/*The client id
	  Required: true
	  In: formData
	*/
	ClientID string

	/*The client secret
	  In: formData
	*/
	ClientSecret *string

	/*The authorization code
	  In: formData
	*/
	Code *string

	/*The PKCE code verifier
	  In: formData
	*/
	CodeVerifier *string

	/*The authorization grant type
	  Required: true
	  In: formData
	*/
	GrantType string

	/*The new refresh token nonce is the S256 of a client generated value as defined
	in the PKCE standard, similar to that used in the authorization flow.

	When requesting `offline_access` the client will generate a nonce value and
	pass the base64 raw url encoded value of the S256 of this nonce.

	Each subsequent `offline_access` request in the `refresh_token` flow requires
	a new verifier.

	  In: formData
	*/
	RefreshNonce *string

	/*The refresh token
	  In: formData
	*/
	RefreshToken *string

	/*Verifier nonce used to validate a refresh token request. This is the base64
	raw url encoded value of the original nonce generated by the client.

	  In: formData
	*/
	RefreshVerifier *string

	/*The scopes
	  In: formData
	  Collection Format: ssv
	*/
	Scope []string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewTokenParams() beforehand.
func (o *TokenParams) BindRequest(r *http.Request, c ...runtime.Consumer) error {
	var res []error

	vars := mux.Vars(r)
	route := struct {
		Consumer runtime.Consumer
		Formats  strfmt.Registry
		GetOK    func(name string) ([]string, bool, bool)
	}{
		Consumer: runtime.JSONConsumer(),
		Formats:  strfmt.NewFormats(),
		GetOK: func(name string) ([]string, bool, bool) {
			val, ok := vars[name]
			if !ok {
				return nil, false, false
			}
			return []string{val}, true, val != ""
		},
	}

	if len(c) > 0 {
		route.Consumer = c[0]
	}

	o.HTTPRequest = r

	if err := r.ParseMultipartForm(32 << 20); err != nil {
		if err != http.ErrNotMultipart {
			return errors.New(400, "%v", err)
		} else if err := r.ParseForm(); err != nil {
			return errors.New(400, "%v", err)
		}
	}
	fds := runtime.Values(r.Form)

	fdAudience, fdhkAudience, _ := fds.GetOK("audience")
	if err := o.bindAudience(fdAudience, fdhkAudience, route.Formats); err != nil {
		res = append(res, err)
	}

	fdClientID, fdhkClientID, _ := fds.GetOK("client_id")
	if err := o.bindClientID(fdClientID, fdhkClientID, route.Formats); err != nil {
		res = append(res, err)
	}

	fdClientSecret, fdhkClientSecret, _ := fds.GetOK("client_secret")
	if err := o.bindClientSecret(fdClientSecret, fdhkClientSecret, route.Formats); err != nil {
		res = append(res, err)
	}

	fdCode, fdhkCode, _ := fds.GetOK("code")
	if err := o.bindCode(fdCode, fdhkCode, route.Formats); err != nil {
		res = append(res, err)
	}

	fdCodeVerifier, fdhkCodeVerifier, _ := fds.GetOK("code_verifier")
	if err := o.bindCodeVerifier(fdCodeVerifier, fdhkCodeVerifier, route.Formats); err != nil {
		res = append(res, err)
	}

	fdGrantType, fdhkGrantType, _ := fds.GetOK("grant_type")
	if err := o.bindGrantType(fdGrantType, fdhkGrantType, route.Formats); err != nil {
		res = append(res, err)
	}

	fdRefreshNonce, fdhkRefreshNonce, _ := fds.GetOK("refresh_nonce")
	if err := o.bindRefreshNonce(fdRefreshNonce, fdhkRefreshNonce, route.Formats); err != nil {
		res = append(res, err)
	}

	fdRefreshToken, fdhkRefreshToken, _ := fds.GetOK("refresh_token")
	if err := o.bindRefreshToken(fdRefreshToken, fdhkRefreshToken, route.Formats); err != nil {
		res = append(res, err)
	}

	fdRefreshVerifier, fdhkRefreshVerifier, _ := fds.GetOK("refresh_verifier")
	if err := o.bindRefreshVerifier(fdRefreshVerifier, fdhkRefreshVerifier, route.Formats); err != nil {
		res = append(res, err)
	}

	fdScope, fdhkScope, _ := fds.GetOK("scope")
	if err := o.bindScope(fdScope, fdhkScope, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindAudience binds and validates parameter Audience from formData.
func (o *TokenParams) bindAudience(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.Audience = &raw

	return nil
}

// bindClientID binds and validates parameter ClientID from formData.
func (o *TokenParams) bindClientID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("client_id", "formData", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true

	if err := validate.RequiredString("client_id", "formData", raw); err != nil {
		return err
	}

	o.ClientID = raw

	return nil
}

// bindClientSecret binds and validates parameter ClientSecret from formData.
func (o *TokenParams) bindClientSecret(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.ClientSecret = &raw

	return nil
}

// bindCode binds and validates parameter Code from formData.
func (o *TokenParams) bindCode(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.Code = &raw

	return nil
}

// bindCodeVerifier binds and validates parameter CodeVerifier from formData.
func (o *TokenParams) bindCodeVerifier(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.CodeVerifier = &raw

	return nil
}

// bindGrantType binds and validates parameter GrantType from formData.
func (o *TokenParams) bindGrantType(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("grant_type", "formData", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true

	if err := validate.RequiredString("grant_type", "formData", raw); err != nil {
		return err
	}

	o.GrantType = raw

	if err := o.validateGrantType(formats); err != nil {
		return err
	}

	return nil
}

// validateGrantType carries on validations for parameter GrantType
func (o *TokenParams) validateGrantType(formats strfmt.Registry) error {

	if err := validate.EnumCase("grant_type", "formData", o.GrantType, []interface{}{"authorization_code", "refresh_token", "client_credentials"}, true); err != nil {
		return err
	}

	return nil
}

// bindRefreshNonce binds and validates parameter RefreshNonce from formData.
func (o *TokenParams) bindRefreshNonce(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.RefreshNonce = &raw

	return nil
}

// bindRefreshToken binds and validates parameter RefreshToken from formData.
func (o *TokenParams) bindRefreshToken(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.RefreshToken = &raw

	return nil
}

// bindRefreshVerifier binds and validates parameter RefreshVerifier from formData.
func (o *TokenParams) bindRefreshVerifier(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.RefreshVerifier = &raw

	return nil
}

// bindScope binds and validates array parameter Scope from formData.
//
// Arrays are parsed according to CollectionFormat: "ssv" (defaults to "csv" when empty).
func (o *TokenParams) bindScope(rawData []string, hasKey bool, formats strfmt.Registry) error {

	var qvScope string
	if len(rawData) > 0 {
		qvScope = rawData[len(rawData)-1]
	}

	// CollectionFormat: ssv
	scopeIC := swag.SplitByFormat(qvScope, "ssv")
	if len(scopeIC) == 0 {
		return nil
	}

	var scopeIR []string
	for _, scopeIV := range scopeIC {
		scopeI := scopeIV

		scopeIR = append(scopeIR, scopeI)
	}

	o.Scope = scopeIR

	return nil
}
