// Code generated by go-swagger; DO NOT EDIT.

package auth

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
	"github.com/gorilla/mux"
)

// NewAuthorizeParams creates a new AuthorizeParams object
// with the default values initialized.
func NewAuthorizeParams() AuthorizeParams {

	var (
		// initialize parameters with default values

		codeChallengeMethodDefault = string("S256")
	)

	return AuthorizeParams{
		CodeChallengeMethod: &codeChallengeMethodDefault,
	}
}

// AuthorizeParams contains all the bound params for the authorize operation
// typically these are obtained from a http.Request
//
// swagger:parameters Authorize
type AuthorizeParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*The URL to which the authentication server redirects the browser for action
	  In: query
	*/
	AppURI *string

	/*
	  Required: true
	  In: query
	*/
	Audience string

	/*The client id
	  Required: true
	  In: query
	*/
	ClientID string

	/*The generated challenge from the code_verifier.
	  Required: true
	  In: query
	*/
	CodeChallenge string

	/*The method used to generate the challenge. The PKCE RFC defines two methods, S256 and plain;
	however, the authentication serivce supports only S256.

	  In: query
	  Default: "S256"
	*/
	CodeChallengeMethod *string

	/*The URL to which the authentication server redirects the browser after authorization has been granted by the user
	  In: query
	*/
	RedirectURI *string

	/*The authorization code response type
	  Required: true
	  In: query
	*/
	ResponseType string

	/*The requested scopes, if empty will request all the user permissions.

	  In: query
	  Collection Format: ssv
	*/
	Scope []string

	/*Opaque state returned the redirect uri
	  In: query
	*/
	State *string

	/*The user pool to authorize against
	  In: query
	*/
	UserPool *string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
func (o *AuthorizeParams) BindRequest(r *http.Request, c ...runtime.Consumer) error {
	var res []error

	// ensure defaults
	*o = NewAuthorizeParams()

	vars := mux.Vars(r)
	route := struct {
		Consumer runtime.Consumer
		Formats  strfmt.Registry
		GetOK    func(name string) ([]string, bool, bool)
	}{
		Consumer: runtime.JSONConsumer(),
		Formats:  strfmt.NewFormats(),
		GetOK: func(name string) ([]string, bool, bool) {
			val, ok := vars[name]
			if !ok {
				return nil, false, false
			}
			return []string{val}, true, val != ""
		},
	}

	if len(c) > 0 {
		route.Consumer = c[0]
	}

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qAppURI, qhkAppURI, _ := qs.GetOK("app_uri")
	if err := o.bindAppURI(qAppURI, qhkAppURI, route.Formats); err != nil {
		res = append(res, err)
	}

	qAudience, qhkAudience, _ := qs.GetOK("audience")
	if err := o.bindAudience(qAudience, qhkAudience, route.Formats); err != nil {
		res = append(res, err)
	}

	qClientID, qhkClientID, _ := qs.GetOK("client_id")
	if err := o.bindClientID(qClientID, qhkClientID, route.Formats); err != nil {
		res = append(res, err)
	}

	qCodeChallenge, qhkCodeChallenge, _ := qs.GetOK("code_challenge")
	if err := o.bindCodeChallenge(qCodeChallenge, qhkCodeChallenge, route.Formats); err != nil {
		res = append(res, err)
	}

	qCodeChallengeMethod, qhkCodeChallengeMethod, _ := qs.GetOK("code_challenge_method")
	if err := o.bindCodeChallengeMethod(qCodeChallengeMethod, qhkCodeChallengeMethod, route.Formats); err != nil {
		res = append(res, err)
	}

	qRedirectURI, qhkRedirectURI, _ := qs.GetOK("redirect_uri")
	if err := o.bindRedirectURI(qRedirectURI, qhkRedirectURI, route.Formats); err != nil {
		res = append(res, err)
	}

	qResponseType, qhkResponseType, _ := qs.GetOK("response_type")
	if err := o.bindResponseType(qResponseType, qhkResponseType, route.Formats); err != nil {
		res = append(res, err)
	}

	qScope, qhkScope, _ := qs.GetOK("scope")
	if err := o.bindScope(qScope, qhkScope, route.Formats); err != nil {
		res = append(res, err)
	}

	qState, qhkState, _ := qs.GetOK("state")
	if err := o.bindState(qState, qhkState, route.Formats); err != nil {
		res = append(res, err)
	}

	qUserPool, qhkUserPool, _ := qs.GetOK("user_pool")
	if err := o.bindUserPool(qUserPool, qhkUserPool, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindAppURI binds and validates parameter AppURI from query.
func (o *AuthorizeParams) bindAppURI(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.AppURI = &raw

	return nil
}

// bindAudience binds and validates parameter Audience from query.
func (o *AuthorizeParams) bindAudience(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("audience", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false
	if err := validate.RequiredString("audience", "query", raw); err != nil {
		return err
	}

	o.Audience = raw

	return nil
}

// bindClientID binds and validates parameter ClientID from query.
func (o *AuthorizeParams) bindClientID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("client_id", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false
	if err := validate.RequiredString("client_id", "query", raw); err != nil {
		return err
	}

	o.ClientID = raw

	return nil
}

// bindCodeChallenge binds and validates parameter CodeChallenge from query.
func (o *AuthorizeParams) bindCodeChallenge(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("code_challenge", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false
	if err := validate.RequiredString("code_challenge", "query", raw); err != nil {
		return err
	}

	o.CodeChallenge = raw

	return nil
}

// bindCodeChallengeMethod binds and validates parameter CodeChallengeMethod from query.
func (o *AuthorizeParams) bindCodeChallengeMethod(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewAuthorizeParams()
		return nil
	}

	o.CodeChallengeMethod = &raw

	if err := o.validateCodeChallengeMethod(formats); err != nil {
		return err
	}

	return nil
}

// validateCodeChallengeMethod carries on validations for parameter CodeChallengeMethod
func (o *AuthorizeParams) validateCodeChallengeMethod(formats strfmt.Registry) error {

	if err := validate.EnumCase("code_challenge_method", "query", *o.CodeChallengeMethod, []interface{}{"S256"}, true); err != nil {
		return err
	}

	return nil
}

// bindRedirectURI binds and validates parameter RedirectURI from query.
func (o *AuthorizeParams) bindRedirectURI(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.RedirectURI = &raw

	return nil
}

// bindResponseType binds and validates parameter ResponseType from query.
func (o *AuthorizeParams) bindResponseType(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("response_type", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false
	if err := validate.RequiredString("response_type", "query", raw); err != nil {
		return err
	}

	o.ResponseType = raw

	if err := o.validateResponseType(formats); err != nil {
		return err
	}

	return nil
}

// validateResponseType carries on validations for parameter ResponseType
func (o *AuthorizeParams) validateResponseType(formats strfmt.Registry) error {

	if err := validate.EnumCase("response_type", "query", o.ResponseType, []interface{}{"code"}, true); err != nil {
		return err
	}

	return nil
}

// bindScope binds and validates array parameter Scope from query.
//
// Arrays are parsed according to CollectionFormat: "ssv" (defaults to "csv" when empty).
func (o *AuthorizeParams) bindScope(rawData []string, hasKey bool, formats strfmt.Registry) error {

	var qvScope string
	if len(rawData) > 0 {
		qvScope = rawData[len(rawData)-1]
	}

	// CollectionFormat: ssv
	scopeIC := swag.SplitByFormat(qvScope, "ssv")
	if len(scopeIC) == 0 {
		return nil
	}

	var scopeIR []string
	for _, scopeIV := range scopeIC {
		scopeI := scopeIV

		scopeIR = append(scopeIR, scopeI)
	}

	o.Scope = scopeIR

	return nil
}

// bindState binds and validates parameter State from query.
func (o *AuthorizeParams) bindState(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.State = &raw

	return nil
}

// bindUserPool binds and validates parameter UserPool from query.
func (o *AuthorizeParams) bindUserPool(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.UserPool = &raw

	return nil
}
