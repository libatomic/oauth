/*
 * This file is part of the Atomic Stack (https://github.com/libatomic/atomic).
 * Copyright (c) 2020 Atomic Publishing.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, version 3.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */

package oauth

import (
	"database/sql/driver"
	"encoding/json"
	"net/http"

	"github.com/go-openapi/errors"
)

// AuthRequest An AuthRequest is generated by the `/authorize` call and passed to the `app_uri`.
// The properties of AuthRequest map to the parameters of the `/authorize` operation.
// This request is encoded and signed by the authorization service and must be passed
// in the POST to `/login` to validate the authentication request.
//
//
type AuthRequest struct {

	// The request audience
	// Required: true
	Audience string `json:"aud"`

	// The request client id
	// Required: true
	ClientID string `json:"client_id"`

	// The request code challenge
	// Required: true
	CodeChallenge *string `json:"code_challenge,omitempty"`

	// The request code challenge method
	// Enum: [S256]
	CodeChallengeMethod string `json:"code_challenge_method,omitempty"`

	// The request expiration epoch
	ExpiresAt int64 `json:"expires_at,omitempty"`

	// The request app uri
	// Required: true
	AppURI string `json:"app_uri"`

	// The request redirect uri
	// Required: true
	RedirectURI string `json:"redirect_uri"`

	// scope
	Scope Permissions `json:"scope,omitempty"`

	// The request state
	State *string `json:"state,omitempty"`

	// The request nonce
	Nonce *string `json:"nonce,omitempty"`

	// Subject is the request subject
	Subject *string `json:"subject,omitempty"`
}

// Value returns AuthRequest as a value that can be stored as json in the database
func (m AuthRequest) Value() (driver.Value, error) {
	return json.Marshal(m)
}

// Scan reads a json value from the database into a AuthRequest
func (m *AuthRequest) Scan(value interface{}) error {
	b, ok := value.([]byte)
	if !ok {
		return errors.New(http.StatusInternalServerError, "type assertion to []byte failed")
	}

	if err := json.Unmarshal(b, &m); err != nil {
		return err
	}

	return nil
}
